name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            executable_name: "Show My Lyrics.exe"
            asset_name: "show-my-lyrics-windows"
            separator: ";"
          - os: macos-latest
            executable_name: "Show My Lyrics"
            asset_name: "show-my-lyrics-macos"
            separator: ":"
          - os: ubuntu-latest
            executable_name: "Show My Lyrics"
            asset_name: "show-my-lyrics-linux"
            separator: ":"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Verify project structure
      run: |
        echo "Current working directory:"
        pwd
        echo "Project root contents:"
        ls -la
        echo "Checking for App.py:"
        ls -la App.py
        echo "Checking for images directory:"
        ls -la images/
        echo "Looking for Display Details.svg specifically:"
        ls -la "images/Display Details.svg" || echo "Display Details.svg not found!"
        echo "All files in images directory:"
        find images/ -type f
      shell: bash

    - name: Build executable
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          pyinstaller --windowed \
            --name="${{ matrix.asset_name }}" \
            --icon=images/icon.ico \
            --add-data "images;images" \
            --debug=all \
            App.py
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          pyinstaller --windowed \
            --name="${{ matrix.asset_name }}" \
            --icon=images/icon.icns \
            --add-data "images:images" \
            --debug=all \
            App.py
        else
          pyinstaller --windowed \
            --name="${{ matrix.asset_name }}" \
            --add-data "images:images" \
            --debug=all \
            App.py
        fi
      shell: bash

    - name: Verify PyInstaller output
      run: |
        echo "PyInstaller dist contents:"
        ls -la dist/
        echo "Looking for built application:"
        find dist/ -name "*${{ matrix.asset_name }}*" -type d
      shell: bash

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: dist/${{ matrix.asset_name }}/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: List downloaded artifacts (debug)
      run: |
        echo "Current directory contents:"
        ls -la
        echo "All downloaded artifacts:"
        find . -maxdepth 2 -type d

    - name: Create release directory structure
      run: |
        mkdir -p release-assets
        
        # Each artifact becomes a folder that gets zipped
        if [ -d "show-my-lyrics-windows" ]; then
          echo "Creating Windows zip..."
          zip -r release-assets/show-my-lyrics-windows.zip show-my-lyrics-windows/
        fi
        
        if [ -d "show-my-lyrics-macos" ]; then
          echo "Creating macOS zip..."
          zip -r release-assets/show-my-lyrics-macos.zip show-my-lyrics-macos/
        fi
        
        if [ -d "show-my-lyrics-linux" ]; then
          echo "Creating Linux zip..."
          zip -r release-assets/show-my-lyrics-linux.zip show-my-lyrics-linux/
        fi
        
        echo "Release zip contents:"
        ls -la release-assets/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: "Show My Lyrics ${{ github.ref_name }}"
        body: |
          ## üéµ Show My Lyrics ${{ github.ref_name }}
          
          ### Download for your platform:
          - ü™ü **Windows**: show-my-lyrics-windows.zip
          - üçé **macOS**: show-my-lyrics-macos.zip
          - üêß **Linux**: show-my-lyrics-linux.zip
          
          üìÇ All files (including settings and cache) stay in the same folder.
          
          ### Setup:
          1. Download and unzip
          2. Run the executable inside the folder
          3. Follow the Spotify login flow

        files: |
          release-assets/show-my-lyrics-windows.zip
          release-assets/show-my-lyrics-macos.zip
          release-assets/show-my-lyrics-linux.zip